{"version":3,"file":"similarity.js","sources":["../src/constant/index.ts","../src/utils/index.ts","../src/utils/compare.ts","../src/config/index.ts","../src/similarity.ts"],"sourcesContent":["/**\n * 根据经验，将表现一致的表情符号放在一起\n */\nexport const tagGroupList = [\n    ['input', 'textarea'],\n    ['h1', 'h2', 'h3', 'h4', 'h5'],\n    ['span', 'i'],\n    ['ul', 'li'],\n    ['div', 'section', 'p', 'article'],\n    ['th', 'tr', 'td'],\n    ['strong', 'b'],\n    ['audio', 'video', 'source', 'figure', 'img'],\n];\n/**\n * 常见标签\n */\nexport const commonTagList = [\n    'input',\n    'textarea',\n    'button',\n    'select',\n    'a',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'li',\n    'span',\n    'div',\n    'p',\n    'th',\n    'tr',\n    'td',\n    'label',\n    'svg',\n];\nexport const propertyNames = [\n    'tag',\n    'classList',\n    'id',\n    'name',\n    'href',\n    'alt',\n    'xpath',\n    'idxpath',\n    'isButton',\n    'location',\n    'area',\n    'shape',\n    'visibleText',\n    'neighborText',\n];\n//# sourceMappingURL=index.js.map","import { propertyNames } from '../constant';\nexport function elementIsVisible(element) {\n    const style = getComputedStyle(element);\n    const rect = element.getBoundingClientRect();\n    if (style.visibility === 'hidden' || style.display === 'none' || rect.height == 0 || rect.width == 0) {\n        return false;\n    }\n    return true;\n}\nexport function uniq(arr) {\n    return Array.from(new Set(arr));\n}\nexport function isBoolean(value) {\n    return typeof value === 'boolean';\n}\nexport function uniqElements(elements) {\n    return [...elements].reduce((uniq, element) => {\n        if (!uniq.some((storedElement) => storedElement.contains(element))) {\n            uniq.push(element);\n        }\n        return uniq;\n    }, []);\n}\nexport function getElementByXPath(xpath) {\n    return document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n}\nexport function getElementByCssSelector(selector) {\n    return document.querySelector(selector);\n}\nexport function getElementBySelector(selector) {\n    const isXpath = selector.startsWith('/');\n    return isXpath ? getElementByXPath(selector) : getElementByCssSelector(selector);\n}\nexport function toPrecision(num, precision = 6) {\n    return Number(num.toFixed(precision));\n}\n/**\n * 移除非法字段，仅保留字母和数字\n * @param str\n * @returns\n */\nexport function stripString(str) {\n    return (str || '').replace(/[^a-zA-Z0-9]/g, '');\n}\nexport function isString(value) {\n    return typeof value === 'string';\n}\nexport function isNil(value) {\n    return value === null || value === undefined;\n}\nexport function isArray(value) {\n    return Array.isArray(value);\n}\nexport function isPlainObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n}\nexport function isNumber(value) {\n    return typeof value === 'number';\n}\nexport function isEmpty(value) {\n    if (isNil(value)) {\n        return true;\n    }\n    if (isString(value) && !value.length) {\n        return true;\n    }\n    if (isArray(value) && !value.length) {\n        return true;\n    }\n    if (isPlainObject(value) && !Object.keys(value).length) {\n        return true;\n    }\n    if (isNumber(value) && value === 0) {\n        return true;\n    }\n    return false;\n}\n/**\n * 获取数组交集\n * @param a\n * @param b\n */\nexport function intersection(a, b) {\n    return [...new Set(a.filter((item) => b.includes(item)))];\n}\n/**\n * 获取数组并集\n * @param a\n * @param b\n * @returns\n */\nexport function union(a, b) {\n    return [...new Set([...a, ...b])];\n}\nfunction inContainerList(element, containerList) {\n    return containerList.some((container) => container.contains(element));\n}\n/**\n * 获取指定坐标的元素, 排除指定的元素\n * @param excludeContainers\n * @param point\n * @returns\n */\nexport function getOwnElement(excludeContainers, point) {\n    const pointElement = document.elementFromPoint(point.x, point.y);\n    if (!inContainerList(pointElement, excludeContainers)) {\n        return pointElement;\n    }\n    const elements = document.elementsFromPoint(point.x, point.y);\n    return elements.find((element) => !inContainerList(element, excludeContainers));\n}\n/**\n * 根据选择器获取元素列表\n * @param selector\n */\nexport function getElementList(selectors) {\n    return selectors.reduce((acc, selector) => {\n        return [...acc, ...document.querySelectorAll(selector)];\n    }, []);\n}\n/**\n * 获取指定 location 的元素\n * @param location\n * @returns\n */\nexport function getElementFromLocation(location) {\n    const { x, y } = location;\n    const point = { x: Math.floor(x + 1), y: Math.floor(y + 1) }; // 这里没有使用中心点，因为中心可能是子元素\n    return document.elementFromPoint(point.x, point.y);\n}\n/**\n * 获取有效属性值的属性名列表\n * @param properties\n * @returns\n */\nexport function getValidPropertyNames(properties) {\n    return propertyNames.filter((name) => {\n        const value = properties[name];\n        if (isBoolean(value) || isNumber(value)) {\n            return true;\n        }\n        return !isEmpty(value);\n    });\n}\n//# sourceMappingURL=index.js.map","/**\n * 属性值比较\n */\nimport { intersection, isEmpty, isNil, isString, stripString, toPrecision, union } from '.';\nimport { tagGroupList } from '../constant';\nexport function equalSimilarity(a, b) {\n    if (isNil(a) || isNil(b)) {\n        return 0;\n    }\n    if (isString(a) && !a.length) {\n        return 0;\n    }\n    if (a === b) {\n        return 1;\n    }\n    return 0;\n}\n/**\n * 比较两个字符串是否相等，忽略大小写\n * @param a\n * @param b\n * @returns\n */\nexport function equalSimilarityCaseInsensitive(a, b) {\n    if (isEmpty(a) || isEmpty(b)) {\n        return 0;\n    }\n    if (String(a).toLowerCase() === String(b).toLowerCase()) {\n        return 1;\n    }\n    return 0;\n}\n/**\n * 寻找标签分类索引\n * @param tag\n * @returns {number} -1 未找到, 否则返回索引\n */\nfunction findTagGroupIndex(tag) {\n    tag = tag.toLowerCase();\n    return tagGroupList.findIndex((tagGroup) => tagGroup.includes(tag));\n}\n/**\n * 比较 tag 标签的相似度\n * @param a\n * @param b\n */\nexport function tagSimilarity(a, b) {\n    if (isEmpty(a) || isEmpty(b)) {\n        return 0;\n    }\n    a = String(a).toLowerCase();\n    b = String(b).toLowerCase();\n    if (a === b) {\n        return 1;\n    }\n    const aIndex = findTagGroupIndex(a);\n    const bIndex = findTagGroupIndex(b);\n    if (aIndex === -1 || bIndex === -1) {\n        return 0;\n    }\n    if (aIndex === bIndex) {\n        return 0.5;\n    }\n    return 0;\n}\n/**\n * 计算编辑距离\n * @param a\n * @param b\n */\nfunction computeLevenshteinDistance(a, b) {\n    const matrix = [];\n    const aLen = a.length;\n    const bLen = b.length;\n    if (!aLen) {\n        return bLen;\n    }\n    if (!bLen) {\n        return aLen;\n    }\n    // 初始化矩阵\n    for (let i = 0; i <= bLen; i++) {\n        matrix[i] = [i];\n    }\n    for (let j = 0; j <= aLen; j++) {\n        matrix[0][j] = j;\n    }\n    for (let i = 1; i <= bLen; i++) {\n        for (let j = 1; j <= aLen; j++) {\n            if (b.charAt(i - 1) === a.charAt(j - 1)) {\n                matrix[i][j] = matrix[i - 1][j - 1];\n            }\n            else {\n                const min = Math.min(matrix[i - 1][j - 1], matrix[i][j - 1], matrix[i - 1][j]);\n                matrix[i][j] = min + 1;\n            }\n        }\n    }\n    return matrix[bLen][aLen];\n}\n/**\n * 交换两个字符串\n * @param a\n * @param b\n */\nfunction swapStringByLength(a, b) {\n    if (a.length > b.length) {\n        return {\n            min: b,\n            max: a,\n        };\n    }\n    return {\n        min: a,\n        max: b,\n    };\n}\n/**\n * 交换两个数组\n * @param a\n * @param b\n */\nfunction swapArrayByLength(a, b) {\n    if (a.length > b.length) {\n        return {\n            min: b,\n            max: a,\n        };\n    }\n    return {\n        min: a,\n        max: b,\n    };\n}\n/**\n * 比较字符串编辑距离\n * @param a\n * @param b\n * @returns\n */\nexport function stringSimilarity(a, b) {\n    const newA = stripString(a);\n    const newB = stripString(b);\n    if (isEmpty(newA) || isEmpty(newB)) {\n        return 0;\n    }\n    if (newA === newB) {\n        return 1;\n    }\n    const maxLen = Math.max(newA.length, newB.length);\n    const { min, max } = swapStringByLength(newA, newB);\n    const distance = computeLevenshteinDistance(max, min);\n    const score = (maxLen - distance) / maxLen;\n    return toPrecision(score);\n}\n/**\n * 移除标点符号\n * 根据 4603 个可见元素文本数据集，统计出现频率最高的标点符号\n *\n * ... 例如 I'm shopping for...\n * ® 注册标识, 例如 Starbucks® Rewards Visa® Prepaid Card\n * ? 例如 stay?\n * ... 省略号, 例如 More...\n * ! 感叹号, 例如 Get it now!\n * ® 注册商标, 例如 Starbucks®\n * . 句号, 例如 back.\n * , 逗号, 例如 UP,\n * @param str\n */\nfunction wordSanitize(str) {\n    return (str || '').replace(/(&|\\?|\\.\\.\\.|\\!|®|©|[,.\\/\\-$]$)/g, '');\n}\nfunction worldListSanitize(wordList) {\n    return wordList.map((word) => (word || '').toLowerCase()).filter(Boolean);\n}\n/**\n * Jaccard(雅卡尔) 相似度, 比较文本集之间的相似度\n * 参考: https://www.wikiwand.com/zh/%E9%9B%85%E5%8D%A1%E5%B0%94%E6%8C%87%E6%95%B0\n * @param wordList1\n * @param wordList2\n */\nfunction jaccardSimilarity(wordList1, wordList2) {\n    if (isEmpty(wordList1) || isEmpty(wordList2)) {\n        return 0;\n    }\n    return intersection(wordList1, wordList2).length / union(wordList1, wordList2).length;\n}\n/**\n * 单词相似度比较\n * 1. 数据清洗：去除空格、标点符号、换行符\n * 2. 相似度比较\n * @param wordList1\n * @param wordList2\n */\nexport function wordSimilarity(wordList1, wordList2) {\n    const cleanWorldList1 = worldListSanitize(wordList1);\n    const cleanWorldList2 = worldListSanitize(wordList2);\n    const score = jaccardSimilarity(cleanWorldList1, cleanWorldList2);\n    return toPrecision(score);\n}\n/**\n * class 名称分割\n * -- 分割, followus--text\n * - 分割, other-project-link\n * __ 分割, footer__module\n * _ 分割, sc_fjdhpX\n * () 分割, W(190px)\n * [] 分割 .example[data-v-f3f3eg9]\n * @param classname\n */\nexport function classSegment(classname) {\n    return classname.split(/(--|-|__|_|\\[|\\()/).filter(Boolean);\n}\n/**\n * 比较两个 classList 的相似度\n * @param classList1\n * @param classList2\n */\nexport function classListSimilarity(classList1, classList2) {\n    if (isEmpty(classList1) || isEmpty(classList2)) {\n        return 0;\n    }\n    const cleanClassList1 = classList1\n        .map((classname) => classSegment(classname))\n        .flat()\n        .map((classname) => classname.toLowerCase());\n    const cleanClassList2 = classList2\n        .map((classname) => classSegment(classname))\n        .flat()\n        .map((classname) => classname.toLowerCase());\n    const score = jaccardSimilarity(cleanClassList1, cleanClassList2);\n    return toPrecision(score);\n}\n/**\n * xpath 相似度\n * 如果 XPath 末尾仅添加（或删除）一个元​​素可以使其与另一个 XPath 相匹配，则它们被认为是相似的\n * @param a\n * @param b\n */\nexport function xpathSimilarity(a, b) {\n    if (isEmpty(a) || isEmpty(b)) {\n        return 0;\n    }\n    const aParts = a.split('/');\n    const bParts = b.split('/');\n    const { min, max } = swapArrayByLength(aParts, bParts);\n    max.pop();\n    if (max.join('/') === min.join('/')) {\n        return 1;\n    }\n    return stringSimilarity(a, b);\n}\n/**\n * 坐标距离相似度\n * @param a\n * @param b\n * @returns\n */\nexport function pointSimilarity(a, b) {\n    if (isEmpty(a) || isEmpty(b)) {\n        return 0;\n    }\n    const invalid = [a.x, a.y, b.x, b.y].some(isNil);\n    if (invalid) {\n        return 0;\n    }\n    const dx = a.x - b.x;\n    const dy = a.y - b.y;\n    const pixelDistance = Math.sqrt(dx * dx + dy * dy);\n    const distance = Math.max(100 - pixelDistance, 0) / 100;\n    return toPrecision(distance);\n}\n/**\n * 整数相似度\n * @param a\n * @param b\n * @returns\n */\nexport function integerSimilarity(a, b) {\n    if (isNil(a) || isNil(b)) {\n        return 0;\n    }\n    const distance = Math.abs(a - b);\n    const max = Math.max(a, b);\n    const score = (max - distance) / max;\n    return toPrecision(score);\n}\n//# sourceMappingURL=compare.js.map","import { classListSimilarity, equalSimilarity, equalSimilarityCaseInsensitive, integerSimilarity, pointSimilarity, stringSimilarity, wordSimilarity, xpathSimilarity, } from '../utils/compare';\n// [0.52, 0.48, 0.48, 1, 0.57, 0.48, 0.57, 0.48, 0.48, 0.48, 0.48, 0.52, 0.39, 0.52];\nexport const propertyConfigByName = {\n    tag: {\n        weight: 1.5,\n        compare: equalSimilarityCaseInsensitive,\n    },\n    name: {\n        weight: 1.5,\n        compare: equalSimilarityCaseInsensitive,\n    },\n    id: {\n        weight: 1.5,\n        compare: equalSimilarityCaseInsensitive,\n    },\n    visibleText: {\n        weight: 1.5,\n        compare: wordSimilarity,\n    },\n    neighborText: {\n        weight: 1.5,\n        compare: wordSimilarity,\n    },\n    classList: {\n        weight: 0.5,\n        compare: classListSimilarity,\n    },\n    href: {\n        weight: 0.5,\n        compare: stringSimilarity,\n    },\n    alt: {\n        weight: 0.5,\n        compare: stringSimilarity,\n    },\n    xpath: {\n        weight: 0.5,\n        compare: xpathSimilarity,\n    },\n    idxpath: {\n        weight: 0.5,\n        compare: xpathSimilarity,\n    },\n    isButton: {\n        weight: 0.5,\n        compare: equalSimilarity,\n    },\n    location: {\n        weight: 0.5,\n        compare: pointSimilarity,\n    },\n    area: {\n        weight: 0.5,\n        compare: integerSimilarity,\n    },\n    shape: {\n        weight: 0.5,\n        compare: integerSimilarity,\n    },\n};\nexport const propertyNames = Object.keys(propertyConfigByName);\n//# sourceMappingURL=index.js.map","/**\n * 计算属性相似度\n */\nimport { propertyConfigByName } from './config';\nimport { getValidPropertyNames, toPrecision } from './utils';\nexport function findPropertyByXpath(xpath, properties) {\n    return properties.find((p) => p.xpath === xpath);\n}\nexport function findPropertyIndexByXpath(xpath, properties) {\n    if (!Array.isArray(properties)) {\n        properties = [properties];\n    }\n    return properties.findIndex((p) => p.xpath === xpath);\n}\nexport function getSimilarScoreDetails(property1, property2) {\n    const validPropertyNames = getValidPropertyNames(property1);\n    const scoreDetails = validPropertyNames.map((name) => {\n        const { weight, compare } = propertyConfigByName[name];\n        const value1 = property1[name];\n        const value2 = property2[name];\n        // @ts-ignore\n        const similarity = compare(value1, value2);\n        if (similarity) {\n            return {\n                name,\n                value: {\n                    target: value1,\n                    candidate: value2,\n                },\n                weight,\n                similarity,\n                score: toPrecision(weight * similarity, 6),\n            };\n        }\n    });\n    return scoreDetails.filter(Boolean);\n}\nfunction sumScore(scoreDetails) {\n    return scoreDetails.reduce((acc, cur) => acc + cur.score, 0);\n}\n/**\n * 将分数转为 0-100 之间的数\n * @param scores\n * @param idealScore\n */\nfunction normalizeScores(scores, idealScore) {\n    return scores.map((score) => normalizeScore(score, idealScore));\n}\n/**\n * 将分数转为 0-100 之间的数\n * @param scores\n * @param idealScore\n */\nfunction normalizeScore(score, idealScore) {\n    if (!idealScore) {\n        return 0;\n    }\n    const normalized = (score * 100) / idealScore;\n    return toPrecision(normalized, 6);\n}\nfunction getMaxScoreDetail(scoreDetailsList) {\n    const scores = scoreDetailsList.map((detail) => sumScore(detail));\n    let index = -1;\n    let max = -Infinity;\n    scores.forEach((score, i) => {\n        if (score > max) {\n            max = score;\n            index = i;\n        }\n    });\n    return {\n        max,\n        index,\n        scores,\n    };\n}\n/**\n * 获取目标元素的理想分数(所有项都匹配)\n * @param property\n * @returns\n */\nexport function getIdealScore(property) {\n    const scoreDetails = getSimilarScoreDetails(property, property);\n    return sumScore(scoreDetails);\n}\n/**\n * 根据元素属性，从候选元素中找到最相似的元素\n * @param property\n * @param properties\n */\nexport function findSimilarProperty(property, properties) {\n    const scoreDetailsList = properties.map((p) => getSimilarScoreDetails(property, p));\n    const idealScore = getIdealScore(property);\n    const { scores, max, index } = getMaxScoreDetail(scoreDetailsList);\n    return {\n        scores,\n        maxScore: max,\n        maxIndex: index,\n        scoreDetails: scoreDetailsList,\n        similarProperty: properties[index],\n        normalizedMaxScore: normalizeScore(max, idealScore),\n    };\n}\n//# sourceMappingURL=similarity.js.map"],"names":[],"mappings":";;;;;;IAAA;IACA;IACA;IAmCO,MAAM,aAAa,GAAG;IAC7B,IAAI,KAAK;IACT,IAAI,WAAW;IACf,IAAI,IAAI;IACR,IAAI,MAAM;IACV,IAAI,MAAM;IACV,IAAI,KAAK;IACT,IAAI,OAAO;IACX,IAAI,SAAS;IACb,IAAI,UAAU;IACd,IAAI,UAAU;IACd,IAAI,MAAM;IACV,IAAI,OAAO;IACX,IAAI,aAAa;IACjB,IAAI,cAAc;IAClB,CAAC;;ICxCM,SAAS,SAAS,CAAC,KAAK,EAAE;IACjC,IAAI,OAAO,OAAO,KAAK,KAAK,SAAS,CAAC;IACtC,CAAC;IAmBM,SAAS,WAAW,CAAC,GAAG,EAAE,SAAS,GAAG,CAAC,EAAE;IAChD,IAAI,OAAO,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;IAC1C,CAAC;IACD;IACA;IACA;IACA;IACA;IACO,SAAS,WAAW,CAAC,GAAG,EAAE;IACjC,IAAI,OAAO,CAAC,GAAG,IAAI,EAAE,EAAE,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;IACpD,CAAC;IACM,SAAS,QAAQ,CAAC,KAAK,EAAE;IAChC,IAAI,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;IACrC,CAAC;IACM,SAAS,KAAK,CAAC,KAAK,EAAE;IAC7B,IAAI,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;IACjD,CAAC;IACM,SAAS,OAAO,CAAC,KAAK,EAAE;IAC/B,IAAI,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACM,SAAS,aAAa,CAAC,KAAK,EAAE;IACrC,IAAI,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAAC;IACvE,CAAC;IACM,SAAS,QAAQ,CAAC,KAAK,EAAE;IAChC,IAAI,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;IACrC,CAAC;IACM,SAAS,OAAO,CAAC,KAAK,EAAE;IAC/B,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;IACtB,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL,IAAI,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;IAC1C,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;IACzC,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL,IAAI,IAAI,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE;IAC5D,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL,IAAI,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE;IACxC,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC;IACD;IACA;IACA;IACA;IACA;IACO,SAAS,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE;IACnC,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACO,SAAS,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;IAC5B,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC;IAqCD;IACA;IACA;IACA;IACA;IACO,SAAS,qBAAqB,CAAC,UAAU,EAAE;IAClD,IAAI,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,KAAK;IAC1C,QAAQ,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IACvC,QAAQ,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;IACjD,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC/B,KAAK,CAAC,CAAC;IACP;;IC/IA;IACA;IACA;IAGO,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;IACtC,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;IAC9B,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;IAClC,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;IACjB,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACO,SAAS,8BAA8B,CAAC,CAAC,EAAE,CAAC,EAAE;IACrD,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;IAClC,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE;IAC7D,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;IAkCD;IACA;IACA;IACA;IACA;IACA,SAAS,0BAA0B,CAAC,CAAC,EAAE,CAAC,EAAE;IAC1C,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;IACtB,IAAI,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,IAAI,CAAC,IAAI,EAAE;IACf,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL,IAAI,IAAI,CAAC,IAAI,EAAE;IACf,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL;IACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;IACpC,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxB,KAAK;IACL,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;IACpC,QAAQ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACzB,KAAK;IACL,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;IACpC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,EAAE;IACxC,YAAY,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;IACrD,gBAAgB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACpD,aAAa;IACb,iBAAiB;IACjB,gBAAgB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/F,gBAAgB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;IACvC,aAAa;IACb,SAAS;IACT,KAAK;IACL,IAAI,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IACD;IACA;IACA;IACA;IACA;IACA,SAAS,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE;IAClC,IAAI,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAE;IAC7B,QAAQ,OAAO;IACf,YAAY,GAAG,EAAE,CAAC;IAClB,YAAY,GAAG,EAAE,CAAC;IAClB,SAAS,CAAC;IACV,KAAK;IACL,IAAI,OAAO;IACX,QAAQ,GAAG,EAAE,CAAC;IACd,QAAQ,GAAG,EAAE,CAAC;IACd,KAAK,CAAC;IACN,CAAC;IACD;IACA;IACA;IACA;IACA;IACA,SAAS,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE;IACjC,IAAI,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,EAAE;IAC7B,QAAQ,OAAO;IACf,YAAY,GAAG,EAAE,CAAC;IAClB,YAAY,GAAG,EAAE,CAAC;IAClB,SAAS,CAAC;IACV,KAAK;IACL,IAAI,OAAO;IACX,QAAQ,GAAG,EAAE,CAAC;IACd,QAAQ,GAAG,EAAE,CAAC;IACd,KAAK,CAAC;IACN,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACO,SAAS,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE;IACvC,IAAI,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IAChC,IAAI,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;IAChC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;IACxC,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,IAAI,KAAK,IAAI,EAAE;IACvB,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACtD,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACxD,IAAI,MAAM,QAAQ,GAAG,0BAA0B,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC1D,IAAI,MAAM,KAAK,GAAG,CAAC,MAAM,GAAG,QAAQ,IAAI,MAAM,CAAC;IAC/C,IAAI,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAkBD,SAAS,iBAAiB,CAAC,QAAQ,EAAE;IACrC,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,IAAI,EAAE,EAAE,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9E,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA,SAAS,iBAAiB,CAAC,SAAS,EAAE,SAAS,EAAE;IACjD,IAAI,IAAI,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;IAClD,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,OAAO,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,MAAM,CAAC;IAC1F,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACO,SAAS,cAAc,CAAC,SAAS,EAAE,SAAS,EAAE;IACrD,IAAI,MAAM,eAAe,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACzD,IAAI,MAAM,eAAe,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACzD,IAAI,MAAM,KAAK,GAAG,iBAAiB,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IACtE,IAAI,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACO,SAAS,YAAY,CAAC,SAAS,EAAE;IACxC,IAAI,OAAO,SAAS,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAChE,CAAC;IACD;IACA;IACA;IACA;IACA;IACO,SAAS,mBAAmB,CAAC,UAAU,EAAE,UAAU,EAAE;IAC5D,IAAI,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE;IACpD,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,MAAM,eAAe,GAAG,UAAU;IACtC,SAAS,GAAG,CAAC,CAAC,SAAS,KAAK,YAAY,CAAC,SAAS,CAAC,CAAC;IACpD,SAAS,IAAI,EAAE;IACf,SAAS,GAAG,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;IACrD,IAAI,MAAM,eAAe,GAAG,UAAU;IACtC,SAAS,GAAG,CAAC,CAAC,SAAS,KAAK,YAAY,CAAC,SAAS,CAAC,CAAC;IACpD,SAAS,IAAI,EAAE;IACf,SAAS,GAAG,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC;IACrD,IAAI,MAAM,KAAK,GAAG,iBAAiB,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IACtE,IAAI,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACO,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;IACtC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;IAClC,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC3D,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC;IACd,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACzC,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,OAAO,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClC,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACO,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;IACtC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;IAClC,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,MAAM,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrD,IAAI,IAAI,OAAO,EAAE;IACjB,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,IAAI,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IACvD,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,aAAa,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC;IAC5D,IAAI,OAAO,WAAW,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACO,SAAS,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE;IACxC,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;IAC9B,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACrC,IAAI,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,IAAI,MAAM,KAAK,GAAG,CAAC,GAAG,GAAG,QAAQ,IAAI,GAAG,CAAC;IACzC,IAAI,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;IAC9B;;IC7RA;IACO,MAAM,oBAAoB,GAAG;IACpC,IAAI,GAAG,EAAE;IACT,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,8BAA8B;IAC/C,KAAK;IACL,IAAI,IAAI,EAAE;IACV,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,8BAA8B;IAC/C,KAAK;IACL,IAAI,EAAE,EAAE;IACR,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,8BAA8B;IAC/C,KAAK;IACL,IAAI,WAAW,EAAE;IACjB,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,cAAc;IAC/B,KAAK;IACL,IAAI,YAAY,EAAE;IAClB,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,cAAc;IAC/B,KAAK;IACL,IAAI,SAAS,EAAE;IACf,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,mBAAmB;IACpC,KAAK;IACL,IAAI,IAAI,EAAE;IACV,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,gBAAgB;IACjC,KAAK;IACL,IAAI,GAAG,EAAE;IACT,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,gBAAgB;IACjC,KAAK;IACL,IAAI,KAAK,EAAE;IACX,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,eAAe;IAChC,KAAK;IACL,IAAI,OAAO,EAAE;IACb,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,eAAe;IAChC,KAAK;IACL,IAAI,QAAQ,EAAE;IACd,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,eAAe;IAChC,KAAK;IACL,IAAI,QAAQ,EAAE;IACd,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,eAAe;IAChC,KAAK;IACL,IAAI,IAAI,EAAE;IACV,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,iBAAiB;IAClC,KAAK;IACL,IAAI,KAAK,EAAE;IACX,QAAQ,MAAM,EAAE,GAAG;IACnB,QAAQ,OAAO,EAAE,iBAAiB;IAClC,KAAK;IACL,CAAC;;IC3DD;IACA;IACA;IAGO,SAAS,mBAAmB,CAAC,KAAK,EAAE,UAAU,EAAE;IACvD,IAAI,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;IACrD,CAAC;IACM,SAAS,wBAAwB,CAAC,KAAK,EAAE,UAAU,EAAE;IAC5D,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;IACpC,QAAQ,UAAU,GAAG,CAAC,UAAU,CAAC,CAAC;IAClC,KAAK;IACL,IAAI,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;IAC1D,CAAC;IACM,SAAS,sBAAsB,CAAC,SAAS,EAAE,SAAS,EAAE;IAC7D,IAAI,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,SAAS,CAAC,CAAC;IAChE,IAAI,MAAM,YAAY,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK;IAC1D,QAAQ,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAC/D,QAAQ,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;IACvC,QAAQ,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;IACvC;IACA,QAAQ,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnD,QAAQ,IAAI,UAAU,EAAE;IACxB,YAAY,OAAO;IACnB,gBAAgB,IAAI;IACpB,gBAAgB,KAAK,EAAE;IACvB,oBAAoB,MAAM,EAAE,MAAM;IAClC,oBAAoB,SAAS,EAAE,MAAM;IACrC,iBAAiB;IACjB,gBAAgB,MAAM;IACtB,gBAAgB,UAAU;IAC1B,gBAAgB,KAAK,EAAE,WAAW,CAAC,MAAM,GAAG,UAAU,EAAE,CAAC,CAAC;IAC1D,aAAa,CAAC;IACd,SAAS;IACT,KAAK,CAAC,CAAC;IACP,IAAI,OAAO,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACD,SAAS,QAAQ,CAAC,YAAY,EAAE;IAChC,IAAI,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACjE,CAAC;IASD;IACA;IACA;IACA;IACA;IACA,SAAS,cAAc,CAAC,KAAK,EAAE,UAAU,EAAE;IAC3C,IAAI,IAAI,CAAC,UAAU,EAAE;IACrB,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,MAAM,UAAU,GAAG,CAAC,KAAK,GAAG,GAAG,IAAI,UAAU,CAAC;IAClD,IAAI,OAAO,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACtC,CAAC;IACD,SAAS,iBAAiB,CAAC,gBAAgB,EAAE;IAC7C,IAAI,MAAM,MAAM,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACtE,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;IACnB,IAAI,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC;IACxB,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC,KAAK;IACjC,QAAQ,IAAI,KAAK,GAAG,GAAG,EAAE;IACzB,YAAY,GAAG,GAAG,KAAK,CAAC;IACxB,YAAY,KAAK,GAAG,CAAC,CAAC;IACtB,SAAS;IACT,KAAK,CAAC,CAAC;IACP,IAAI,OAAO;IACX,QAAQ,GAAG;IACX,QAAQ,KAAK;IACb,QAAQ,MAAM;IACd,KAAK,CAAC;IACN,CAAC;IACD;IACA;IACA;IACA;IACA;IACO,SAAS,aAAa,CAAC,QAAQ,EAAE;IACxC,IAAI,MAAM,YAAY,GAAG,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACpE,IAAI,OAAO,QAAQ,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IACD;IACA;IACA;IACA;IACA;IACO,SAAS,mBAAmB,CAAC,QAAQ,EAAE,UAAU,EAAE;IAC1D,IAAI,MAAM,gBAAgB,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,sBAAsB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;IACxF,IAAI,MAAM,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC/C,IAAI,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;IACvE,IAAI,OAAO;IACX,QAAQ,MAAM;IACd,QAAQ,QAAQ,EAAE,GAAG;IACrB,QAAQ,QAAQ,EAAE,KAAK;IACvB,QAAQ,YAAY,EAAE,gBAAgB;IACtC,QAAQ,eAAe,EAAE,UAAU,CAAC,KAAK,CAAC;IAC1C,QAAQ,kBAAkB,EAAE,cAAc,CAAC,GAAG,EAAE,UAAU,CAAC;IAC3D,KAAK,CAAC;IACN;;;;;;;;;;;;"}